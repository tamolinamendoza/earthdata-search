@edsc.util.xhr = do (window, document, csrfToken=@edsc.config.csrfToken, $=jQuery) ->
  callbacks = []

  xhrs = 0
  timeoutPool = []
  realSetTimeout = window.setTimeout
  realClearTimeout = window.clearTimeout
  isRefreshing = false

  hasPending = ->
    xhrPool.length > 0 || timeoutPool.length > 0 || edscplugin.hasPending()

  runCallbacks = ->
    while !hasPending() && callbacks.length > 0
      callbacks.pop()()

  edscplugin.onAllComplete(runCallbacks)

  window.setTimeout = (f, args...) ->
    id = null
    onTimeout = ->
      try
        if typeof f == "string"
          eval(f)
        else
          f()
      finally
        index = timeoutPool.indexOf(id)
        timeoutPool.splice(index, 1) if index > -1
        runCallbacks()

    # ie9 needs the following line instead of the original:
    #   id = realSetTimeout(onTimeout, args...)
    id = realSetTimeout.apply(window, [onTimeout].concat(args))
    timeoutPool.push(id)
    id

  window.clearTimeout = (id) ->
    index = timeoutPool.indexOf(id)
    timeoutPool.splice(index, 1) if index > -1
    realClearTimeout(id)
    return

  <% if Rails.env.test? %>
    window.requestAnimationFrame = (f) -> window.setTimeout(f, 0)
    window.cancelAnimationFrame = (id) -> window.clearTimeout(id)
  <% end %>

  xhrPool = []
  $(document)
    .ajaxSend (event, xhr, settings) ->
      xhr.setRequestHeader('X-CSRF-Token', csrfToken)
      xhr.setRequestHeader('edsc-echo-env', window.echoEnv)
      xhr.id = xhrs++
      xhrPool.push(xhr.id)
    .ajaxComplete (event, xhr) ->
      index = xhrPool.indexOf(xhr.id)
      xhrPool.splice(index, 1) if (index > -1)
      runCallbacks()

  wait = (callback) ->
    execWhenReady = ->
      callbacks.push(callback)
    setTimeout(execWhenReady, 0)

  deferredXHR = (method, args...) ->
    deferred = $.Deferred()

    if isTokenExpired()
      unless isRefreshing
        console.log 'Refreshing URS token'
        isRefreshing = true
        $.ajax
          url: '/refresh_token'
          method: 'get'
          dataType: 'json'
          success: (data, status, xhr) ->
            if data?
              window.tokenExpiresIn = data.tokenExpiresIn
              window.tokenLoadTime = +new Date();

            isRefreshing = false
            doXHR(deferred, method, args...)
          error: (response, type, reason) ->
            window.location.href = '/login'
      else
        wait(-> doXHR(deferred, method, args...))
    else
      doXHR(deferred, method, args...)

    deferred

  doXHR = (deferred, method, args...) ->
    if deferred.state() == 'pending'
      xhr = $[method](args...)
      xhr.done(-> deferred.resolve())
      xhr.fail((response, type, reason) ->
        if response.status == 401
          $.ajax
            url: '/logout'
            method: 'get'
            dataType: 'json'
            success: ->
              window.location.reload()
        deferred.reject())
      deferred.fail ->
        xhr.abort()

  isTokenExpired = ->
    expires = getTokenExpires()
    expires? && new Date() > expires

  getTokenExpires = ->
    expiresIn = window.tokenExpiresIn
    tokenLoadTime = window.tokenLoadTime
    if expiresIn?
      tokenLoadTime + expiresIn
    else
      null

  exports =
    hasPending: hasPending
    wait: wait
    isTokenExpired: isTokenExpired
    getTokenExpires: getTokenExpires
    ajax: (args...) -> deferredXHR('ajax', args...)
    post: (args...) -> deferredXHR('post', args...)
    getJSON: (args...) -> deferredXHR('getJSON', args...)
